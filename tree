#include <stdio.h> 
#include <iostream>  
#include <exception>
#include <stdlib.h> //加上system("pause")所依赖的头文件
using namespace std; 

struct BinaryTreeNode 
{
    int m_nValue; 
    BinaryTreeNode* m_pLeft;  
    BinaryTreeNode* m_pRight; 
};

BinaryTreeNode *ConstructCore(int *startPreorder, int *endPreorder, int *startInorder, int *endInorder)  
{  
    //前序遍历序列的第一个数字是根节点的值
	int rootValue = startPreorder[0];  
    BinaryTreeNode *root = new BinaryTreeNode();  
    root->m_nValue = rootValue;  
    root->m_pLeft = NULL;  
    root->m_pRight = NULL;  
  
    //递归结束条件，当只剩节点时  
    if(startPreorder == endPreorder)  
    {  
        if(startInorder == endInorder && *startPreorder == *startInorder)  
        {  
            return root;  
        }else  
        {  
            return NULL;  
        }  
    }  
  
	//中序遍历找到根节点的值
    int *rootInorder = startInorder;  
    while(rootInorder <= endInorder && *rootInorder != rootValue)  
    {  
        rootInorder++;  
    }  
  
    if(rootInorder > endInorder)  
    {  
        printf("无效的输入\n");  
    }  
  
    int leftLength = rootInorder - startInorder;  
    int rightLength = endInorder - rootInorder;  
  
    if(leftLength > 0)  
    {  
        //构建左子树
		root->m_pLeft = ConstructCore(startPreorder + 1, startPreorder + leftLength, startInorder, startInorder + leftLength - 1);  
    }  
  
    if(rightLength > 0)  
    {  
        //构建右子树
		root->m_pRight = ConstructCore(startPreorder + leftLength + 1, endPreorder, rootInorder + 1, endInorder);  
    }  
  
    return root;  
}
BinaryTreeNode *Construct(int * preorder,int * inorder,int length)
{
	if(preorder==NULL||inorder==NULL||length<=0)
		return NULL;
	return ConstructCore(preorder, preorder + length - 1,inorder, inorder + length - 1);

}
void PrintTreeNode(BinaryTreeNode* pNode)  
{  
    if(pNode != NULL)  
    {  
        printf("value of this node is: %d\n", pNode->m_nValue);  
  
        if(pNode->m_pLeft != NULL)  
            printf("value of its left child is: %d.\n", pNode->m_pLeft->m_nValue);  
        else  
            printf("left child is null.\n");  
  
        if(pNode->m_pRight != NULL)  
            printf("value of its right child is: %d.\n", pNode->m_pRight->m_nValue);  
        else  
            printf("right child is null.\n");  
    }  
    else  
    {  
        printf("this node is null.\n");  
    }  
  
    printf("\n");  
}  
  
void PrintTree(BinaryTreeNode* pRoot)  
{  
    PrintTreeNode(pRoot);  
  
    if(pRoot != NULL)  
    {  
        if(pRoot->m_pLeft != NULL)  
            PrintTree(pRoot->m_pLeft);  
  
        if(pRoot->m_pRight != NULL)  
            PrintTree(pRoot->m_pRight);  
    }  
}  
  
void DestroyTree(BinaryTreeNode* pRoot)  
{  
    if(pRoot != NULL)  
    {  
        BinaryTreeNode* pLeft = pRoot->m_pLeft;  
        BinaryTreeNode* pRight = pRoot->m_pRight;  
  
        delete pRoot;  
        pRoot = NULL;  
  
        DestroyTree(pLeft);  
        DestroyTree(pRight);  
    }  
}  
//=========================测试代码===========================  
void Test(  
    char *testName,  
    int *preorder,  
    int *inorder,  
    int length  
    )  
{  
    if(testName != NULL)  
        cout << "begins: " << testName << endl;  
    cout << "the preorder sequence is: ";  
    for (int i = 0;i < length;++i)  
        cout << preorder[i] << " ";  
    cout << endl << "the inorder sequence is: ";  
    for (int i = 0;i < length;++i)  
        cout << inorder[i] << " ";  
    cout << endl;  
  
    try  
    {  
        BinaryTreeNode *root = Construct(preorder,inorder,length);  
        PrintTree(root);  
        DestroyTree(root);  
    }  
    catch (exception& exception)  
    {  
        cout << "Invalid Input.\n";  
    }  
    //cout << endl;  
}  
  
// 普通二叉树  
//              1  
//           /     \  
//          2       3    
//         /       / \  
//        4       5   6  
//         \         /  
//          7       8  
void Test11()  
{  
    const int length = 8;  
    int preorder[length] = {1, 2, 4, 7, 3, 5, 6, 8};  
    int inorder[length] = {4, 7, 2, 1, 5, 3, 8, 6};  
  
    Test("Test1", preorder, inorder, length);  
}  
  
// 所有结点都没有右子结点  
//            1  
//           /   
//          2     
//         /   
//        3   
//       /  
//      4  
//     /  
//    5  
void Test12()  
{  
    const int length = 5;  
    int preorder[length] = {1, 2, 3, 4, 5};  
    int inorder[length] = {5, 4, 3, 2, 1};  
  
    Test("Test2", preorder, inorder, length);  
}  
  
// 所有结点都没有左子结点  
//            1  
//             \   
//              2     
//               \   
//                3   
//                 \  
//                  4  
//                   \  
//                    5  
void Test13()  
{  
    const int length = 5;  
    int preorder[length] = {1, 2, 3, 4, 5};  
    int inorder[length] = {1, 2, 3, 4, 5};  
  
    Test("Test3", preorder, inorder, length);  
}  
  
// 树中只有一个结点  
void Test14()  
{  
    const int length = 1;  
    int preorder[length] = {1};  
    int inorder[length] = {1};  
  
    Test("Test4", preorder, inorder, length);  
}  
  
// 完全二叉树  
//              1  
//           /     \  
//          2       3    
//         / \     / \  
//        4   5   6   7  
void Test15()  
{  
    const int length = 7;  
    int preorder[length] = {1, 2, 4, 5, 3, 6, 7};  
    int inorder[length] = {4, 2, 5, 1, 6, 3, 7};  
  
    Test("Test5", preorder, inorder, length);  
}  
  
// 输入空指针  
void Test16()  
{  
    Test("Test6", NULL, NULL, 0);  
}  
  
// 输入的两个序列不匹配  
void Test17()  
{  
    const int length = 7;  
    int preorder[length] = {1, 2, 4, 5, 3, 6, 7};  
    int inorder[length] = {4, 2, 8, 1, 6, 3, 7};  
  
    Test("Test7: for unmatched input", preorder, inorder, length);  
}  
  
/*int main()  
{  
    Test11();  
    Test12();  
    Test13();  
    Test14();  
    Test15();  
    Test16();  
    Test17();
	system("pause");
    return 0;  
} */ 
